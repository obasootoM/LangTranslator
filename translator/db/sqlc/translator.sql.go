// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: translator.sql

package db

import (
	"context"
)

const createTranslator = `-- name: CreateTranslator :one
INSERT INTO translator (
    first_name,
    second_name,
    email,
    password
    )
VALUES($1,$2,$3,$4)
RETURNING id, first_name, second_name, email, password, created_at, updated_at
`

type CreateTranslatorParams struct {
	FirstName  string `json:"first_name"`
	SecondName string `json:"second_name"`
	Email      string `json:"email"`
	Password   string `json:"password"`
}

func (q *Queries) CreateTranslator(ctx context.Context, arg CreateTranslatorParams) (Translator, error) {
	row := q.db.QueryRowContext(ctx, createTranslator,
		arg.FirstName,
		arg.SecondName,
		arg.Email,
		arg.Password,
	)
	var i Translator
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.SecondName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTranslator = `-- name: DeleteTranslator :exec
DELETE FROM translator 
 WHERE email = $1
`

func (q *Queries) DeleteTranslator(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteTranslator, email)
	return err
}

const getTranslator = `-- name: GetTranslator :one
SELECT id, first_name, second_name, email, password, created_at, updated_at FROM translator 
WHERE  email = $1
LIMIT 1
`

func (q *Queries) GetTranslator(ctx context.Context, email string) (Translator, error) {
	row := q.db.QueryRowContext(ctx, getTranslator, email)
	var i Translator
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.SecondName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
