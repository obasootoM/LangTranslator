// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: profile.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (
  name,
  image,
  gender,
  email,
  phone_number,
  address_line,
  country,
  native_language
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING id, image, name, gender, phone_number, email, address_line, country, native_language, created_at
`

type CreateProfileParams struct {
	Name           string `json:"name"`
	Image          string `json:"image"`
	Gender         string `json:"gender"`
	Email          string `json:"email"`
	PhoneNumber    string `json:"phone_number"`
	AddressLine    string `json:"address_line"`
	Country        string `json:"country"`
	NativeLanguage string `json:"native_language"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.Name,
		arg.Image,
		arg.Gender,
		arg.Email,
		arg.PhoneNumber,
		arg.AddressLine,
		arg.Country,
		arg.NativeLanguage,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.Name,
		&i.Gender,
		&i.PhoneNumber,
		&i.Email,
		&i.AddressLine,
		&i.Country,
		&i.NativeLanguage,
		&i.CreatedAt,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, image, name, gender, phone_number, email, address_line, country, native_language, created_at FROM profile 
WHERE  email = $1
LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, email string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, email)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.Name,
		&i.Gender,
		&i.PhoneNumber,
		&i.Email,
		&i.AddressLine,
		&i.Country,
		&i.NativeLanguage,
		&i.CreatedAt,
	)
	return i, err
}

const listProfile = `-- name: ListProfile :many
SELECT id, image, name, gender, phone_number, email, address_line, country, native_language, created_at FROM profile
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProfileParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProfile(ctx context.Context, arg ListProfileParams) ([]Profile, error) {
	rows, err := q.db.QueryContext(ctx, listProfile, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.Image,
			&i.Name,
			&i.Gender,
			&i.PhoneNumber,
			&i.Email,
			&i.AddressLine,
			&i.Country,
			&i.NativeLanguage,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profile 
  set name =$8,
  image = $7,
  address_line = $6,
  gender = $5,
  email = $4,
  phone_number = $3,
  country = $2 
WHERE id = $1
RETURNING id, image, name, gender, phone_number, email, address_line, country, native_language, created_at
`

type UpdateProfileParams struct {
	ID          int64  `json:"id"`
	Country     string `json:"country"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
	Gender      string `json:"gender"`
	AddressLine string `json:"address_line"`
	Image       string `json:"image"`
	Name        string `json:"name"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfile,
		arg.ID,
		arg.Country,
		arg.PhoneNumber,
		arg.Email,
		arg.Gender,
		arg.AddressLine,
		arg.Image,
		arg.Name,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Image,
		&i.Name,
		&i.Gender,
		&i.PhoneNumber,
		&i.Email,
		&i.AddressLine,
		&i.Country,
		&i.NativeLanguage,
		&i.CreatedAt,
	)
	return i, err
}
