// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: sessiontra.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSessionTrans = `-- name: CreateSessionTrans :one
INSERT INTO sessionsTrans (
  id,
  email,
  refresh_token,
  user_agent,
  translator_ip,
  is_blocked,
  expires_at
) VALUES ($1,$2,$3,$4,$5,$6,$7)
RETURNING id, email, refresh_token, user_agent, translator_ip, is_blocked, expires_at, created_at
`

type CreateSessionTransParams struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	TranslatorIp string    `json:"translator_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSessionTrans(ctx context.Context, arg CreateSessionTransParams) (Sessionstran, error) {
	row := q.db.QueryRowContext(ctx, createSessionTrans,
		arg.ID,
		arg.Email,
		arg.RefreshToken,
		arg.UserAgent,
		arg.TranslatorIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Sessionstran
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.RefreshToken,
		&i.UserAgent,
		&i.TranslatorIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionTrans = `-- name: GetSessionTrans :one
SELECT id, email, refresh_token, user_agent, translator_ip, is_blocked, expires_at, created_at FROM sessionstrans 
WHERE  email = $1
LIMIT 1
`

func (q *Queries) GetSessionTrans(ctx context.Context, email string) (Sessionstran, error) {
	row := q.db.QueryRowContext(ctx, getSessionTrans, email)
	var i Sessionstran
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.RefreshToken,
		&i.UserAgent,
		&i.TranslatorIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSessionTrans = `-- name: UpdateSessionTrans :exec
UPDATE sessionstrans 
set is_blocked = $2,
email = $3
WHERE id = $1
RETURNING id, email, refresh_token, user_agent, translator_ip, is_blocked, expires_at, created_at
`

type UpdateSessionTransParams struct {
	ID        uuid.UUID `json:"id"`
	IsBlocked bool      `json:"is_blocked"`
	Email     string    `json:"email"`
}

func (q *Queries) UpdateSessionTrans(ctx context.Context, arg UpdateSessionTransParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionTrans, arg.ID, arg.IsBlocked, arg.Email)
	return err
}
