// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: translator.sql

package db

import (
	"context"
)

const createTranslator = `-- name: CreateTranslator :one
INSERT INTO translator (
    first_name,
    second_name,
    email,
    password,
    profession,
    translator_category,
    rating, 
    certified,
    source_language,
    target_language,
    timezone)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
RETURNING id, first_name, second_name, email, password, profession, translator_category, rating, source_language, target_language, certified, timezone, created_at, updated_at
`

type CreateTranslatorParams struct {
	FirstName          string      `json:"first_name"`
	SecondName         string      `json:"second_name"`
	Email              string      `json:"email"`
	Password           string      `json:"password"`
	Profession         string      `json:"profession"`
	TranslatorCategory string      `json:"translator_category"`
	Rating             float64     `json:"rating"`
	Certified          bool        `json:"certified"`
	SourceLanguage     string      `json:"source_language"`
	TargetLanguage     string      `json:"target_language"`
	Timezone           interface{} `json:"timezone"`
}

func (q *Queries) CreateTranslator(ctx context.Context, arg CreateTranslatorParams) (Translator, error) {
	row := q.db.QueryRowContext(ctx, createTranslator,
		arg.FirstName,
		arg.SecondName,
		arg.Email,
		arg.Password,
		arg.Profession,
		arg.TranslatorCategory,
		arg.Rating,
		arg.Certified,
		arg.SourceLanguage,
		arg.TargetLanguage,
		arg.Timezone,
	)
	var i Translator
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.SecondName,
		&i.Email,
		&i.Password,
		&i.Profession,
		&i.TranslatorCategory,
		&i.Rating,
		&i.SourceLanguage,
		&i.TargetLanguage,
		&i.Certified,
		&i.Timezone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
