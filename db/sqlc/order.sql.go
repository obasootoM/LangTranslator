// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order.sql

package db

import (
	"context"
)

const createOrders = `-- name: CreateOrders :one
INSERT INTO orders (
  source_language,
  target_language,
  translator,
  proof_reader,
  translation_delivary_date,
  proof_reading_delivary_date,
  project_end_date,
  service_level,
  profession,
  translator_category,
  delivary_speed,
  translator_request,
  delivary_address
)VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
RETURNING id, source_language, target_language, translator, proof_reader, translation_delivary_date, proof_reading_delivary_date, project_end_date, service_level, profession, translator_category, delivary_speed, translator_request, delivary_address
`

type CreateOrdersParams struct {
	SourceLanguage           string `json:"source_language"`
	TargetLanguage           string `json:"target_language"`
	Translator               string `json:"translator"`
	ProofReader              string `json:"proof_reader"`
	TranslationDelivaryDate  string `json:"translation_delivary_date"`
	ProofReadingDelivaryDate string `json:"proof_reading_delivary_date"`
	ProjectEndDate           string `json:"project_end_date"`
	ServiceLevel             string `json:"service_level"`
	Profession               string `json:"profession"`
	TranslatorCategory       string `json:"translator_category"`
	DelivarySpeed            string `json:"delivary_speed"`
	TranslatorRequest        string `json:"translator_request"`
	DelivaryAddress          string `json:"delivary_address"`
}

func (q *Queries) CreateOrders(ctx context.Context, arg CreateOrdersParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrders,
		arg.SourceLanguage,
		arg.TargetLanguage,
		arg.Translator,
		arg.ProofReader,
		arg.TranslationDelivaryDate,
		arg.ProofReadingDelivaryDate,
		arg.ProjectEndDate,
		arg.ServiceLevel,
		arg.Profession,
		arg.TranslatorCategory,
		arg.DelivarySpeed,
		arg.TranslatorRequest,
		arg.DelivaryAddress,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.SourceLanguage,
		&i.TargetLanguage,
		&i.Translator,
		&i.ProofReader,
		&i.TranslationDelivaryDate,
		&i.ProofReadingDelivaryDate,
		&i.ProjectEndDate,
		&i.ServiceLevel,
		&i.Profession,
		&i.TranslatorCategory,
		&i.DelivarySpeed,
		&i.TranslatorRequest,
		&i.DelivaryAddress,
	)
	return i, err
}
