// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: client.sql

package db

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO client (
  first_name,
  second_name,
  email,
  password,
  phone_number,
  language,
  currency,
  time
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING id, first_name, second_name, email, phone_number, language, currency, time, password, updated_at, created_at
`

type CreateClientParams struct {
	FirstName   string `json:"first_name"`
	SecondName  string `json:"second_name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
	Language    string `json:"language"`
	Currency    string `json:"currency"`
	Time        string `json:"time"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.FirstName,
		arg.SecondName,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.Language,
		arg.Currency,
		arg.Time,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.SecondName,
		&i.Email,
		&i.PhoneNumber,
		&i.Language,
		&i.Currency,
		&i.Time,
		&i.Password,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getEmail = `-- name: GetEmail :one
SELECT id, first_name, second_name, email, phone_number, language, currency, time, password, updated_at, created_at FROM client 
WHERE  email = $1
LIMIT 1
`

func (q *Queries) GetEmail(ctx context.Context, email string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getEmail, email)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.SecondName,
		&i.Email,
		&i.PhoneNumber,
		&i.Language,
		&i.Currency,
		&i.Time,
		&i.Password,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
